module Five exposing (main)

import Array exposing (Array)
import Binary
import Debug
import Dict exposing (Dict)
import Html exposing (text)


input =
    "959,103 -> 139,923\n899,63 -> 899,53\n591,871 -> 364,644\n739,913 -> 310,484\n460,309 -> 460,705\n351,389 -> 351,837\n420,55 -> 420,541\n916,520 -> 382,520\n136,604 -> 295,604\n343,59 -> 142,59\n951,206 -> 806,206\n984,950 -> 61,27\n739,388 -> 988,388\n374,370 -> 644,370\n403,504 -> 798,899\n943,535 -> 229,535\n149,227 -> 583,661\n62,126 -> 62,352\n131,391 -> 131,717\n254,944 -> 254,220\n572,111 -> 572,47\n336,249 -> 830,743\n898,858 -> 203,163\n203,320 -> 825,942\n19,318 -> 19,120\n740,432 -> 740,39\n591,383 -> 220,754\n445,592 -> 19,592\n202,370 -> 837,370\n473,916 -> 600,789\n118,955 -> 884,189\n377,376 -> 533,532\n160,264 -> 160,62\n627,572 -> 627,679\n217,690 -> 217,629\n685,323 -> 866,504\n391,309 -> 493,207\n872,776 -> 357,776\n116,326 -> 116,426\n82,900 -> 832,900\n594,862 -> 594,593\n802,636 -> 802,223\n862,226 -> 862,787\n313,573 -> 834,573\n145,631 -> 13,499\n545,433 -> 420,308\n427,623 -> 427,808\n898,120 -> 511,120\n859,811 -> 859,28\n715,958 -> 715,893\n115,234 -> 484,234\n125,253 -> 50,253\n737,265 -> 158,265\n523,965 -> 523,983\n118,51 -> 118,766\n455,774 -> 455,357\n680,881 -> 925,881\n191,186 -> 187,186\n821,629 -> 792,658\n397,906 -> 397,962\n988,811 -> 988,427\n91,733 -> 519,733\n46,172 -> 566,172\n740,619 -> 880,759\n609,465 -> 609,702\n289,211 -> 289,620\n622,135 -> 622,929\n113,53 -> 872,53\n559,713 -> 559,132\n894,237 -> 211,920\n237,259 -> 237,39\n738,542 -> 976,542\n163,34 -> 525,34\n681,672 -> 264,255\n37,827 -> 722,827\n60,803 -> 514,349\n433,866 -> 433,257\n379,493 -> 379,643\n697,588 -> 192,83\n875,646 -> 318,89\n634,983 -> 634,111\n636,69 -> 636,41\n911,780 -> 701,570\n792,71 -> 956,71\n682,338 -> 608,412\n257,768 -> 450,575\n112,25 -> 795,708\n730,86 -> 730,65\n966,785 -> 789,608\n390,263 -> 483,356\n90,852 -> 90,471\n507,914 -> 769,914\n803,535 -> 803,245\n710,787 -> 570,787\n138,842 -> 270,710\n862,988 -> 862,656\n56,408 -> 849,408\n16,10 -> 979,973\n982,14 -> 12,984\n647,915 -> 38,306\n797,487 -> 19,487\n539,933 -> 924,933\n509,734 -> 176,734\n813,505 -> 976,505\n474,987 -> 474,896\n21,200 -> 164,200\n986,973 -> 31,18\n919,830 -> 111,22\n32,574 -> 456,150\n743,595 -> 842,595\n623,306 -> 722,306\n878,367 -> 519,367\n924,221 -> 924,231\n86,950 -> 773,263\n950,248 -> 537,248\n149,155 -> 962,968\n449,568 -> 179,568\n186,304 -> 868,986\n921,320 -> 639,602\n602,262 -> 602,500\n602,33 -> 602,248\n380,731 -> 423,774\n535,110 -> 638,110\n552,317 -> 552,75\n173,667 -> 173,847\n707,480 -> 195,480\n833,398 -> 267,964\n276,716 -> 413,716\n342,816 -> 922,816\n24,184 -> 715,875\n762,330 -> 717,285\n718,886 -> 718,551\n707,834 -> 707,704\n479,578 -> 161,896\n145,297 -> 145,435\n760,651 -> 536,875\n954,629 -> 954,816\n305,949 -> 305,919\n55,132 -> 55,233\n469,85 -> 439,85\n653,990 -> 536,990\n876,531 -> 432,87\n698,207 -> 698,672\n11,70 -> 766,825\n591,357 -> 30,918\n697,987 -> 697,823\n610,903 -> 370,663\n319,678 -> 319,504\n337,150 -> 309,150\n876,57 -> 311,57\n673,268 -> 345,596\n895,364 -> 518,741\n327,662 -> 941,48\n77,709 -> 110,742\n194,78 -> 661,78\n587,24 -> 825,24\n503,317 -> 719,317\n459,632 -> 704,387\n717,292 -> 835,292\n912,927 -> 72,87\n510,527 -> 146,527\n336,771 -> 336,266\n566,961 -> 496,961\n969,335 -> 122,335\n925,443 -> 925,397\n316,812 -> 606,812\n815,795 -> 116,795\n169,36 -> 354,36\n358,274 -> 389,274\n302,147 -> 839,684\n762,372 -> 972,372\n172,721 -> 682,211\n265,150 -> 248,167\n753,559 -> 307,559\n823,121 -> 823,126\n498,856 -> 498,135\n75,977 -> 75,381\n541,297 -> 541,320\n735,108 -> 866,108\n434,907 -> 868,907\n915,959 -> 255,959\n967,666 -> 967,209\n361,600 -> 361,222\n314,580 -> 314,497\n175,989 -> 523,641\n957,97 -> 311,743\n956,227 -> 12,227\n95,364 -> 95,742\n857,141 -> 193,805\n388,651 -> 468,731\n582,177 -> 324,177\n68,272 -> 68,720\n543,490 -> 910,490\n508,281 -> 902,281\n823,380 -> 823,296\n23,10 -> 946,933\n813,70 -> 813,450\n881,893 -> 598,893\n535,781 -> 973,781\n80,890 -> 909,61\n604,630 -> 307,927\n836,917 -> 184,917\n76,727 -> 10,727\n727,235 -> 727,578\n629,80 -> 892,80\n110,655 -> 663,102\n985,12 -> 11,986\n830,656 -> 830,761\n660,869 -> 660,543\n381,340 -> 381,562\n392,735 -> 417,735\n855,24 -> 320,24\n801,669 -> 278,146\n730,964 -> 107,964\n523,158 -> 385,20\n27,833 -> 27,987\n569,707 -> 500,707\n527,732 -> 527,424\n74,88 -> 273,287\n143,974 -> 143,735\n247,388 -> 813,954\n577,14 -> 945,382\n49,43 -> 953,947\n332,210 -> 332,143\n69,280 -> 949,280\n25,923 -> 904,44\n306,569 -> 306,470\n158,273 -> 113,228\n771,355 -> 694,278\n515,115 -> 245,385\n427,381 -> 427,729\n16,987 -> 987,16\n319,463 -> 319,234\n854,977 -> 66,189\n794,194 -> 794,183\n576,65 -> 576,843\n37,964 -> 734,964\n740,920 -> 740,877\n245,487 -> 245,957\n404,794 -> 853,794\n660,656 -> 660,756\n921,605 -> 127,605\n650,894 -> 916,894\n968,893 -> 481,406\n986,979 -> 21,14\n154,303 -> 498,647\n720,338 -> 229,338\n62,936 -> 62,897\n55,820 -> 55,923\n812,31 -> 551,31\n338,466 -> 951,466\n663,492 -> 775,604\n449,602 -> 39,602\n44,403 -> 44,144\n58,62 -> 339,62\n713,730 -> 713,502\n704,525 -> 976,797\n372,709 -> 372,680\n709,387 -> 153,387\n922,103 -> 615,103\n629,839 -> 121,839\n206,722 -> 529,722\n232,556 -> 422,746\n300,470 -> 300,726\n376,820 -> 622,574\n834,25 -> 255,604\n271,200 -> 271,875\n804,934 -> 872,934\n900,753 -> 900,632\n604,323 -> 604,70\n890,911 -> 890,41\n464,169 -> 812,169\n850,196 -> 850,903\n34,574 -> 34,54\n718,59 -> 462,315\n431,923 -> 737,923\n433,573 -> 433,420\n297,478 -> 297,775\n756,545 -> 544,545\n247,708 -> 247,702\n736,835 -> 173,272\n319,85 -> 319,827\n931,775 -> 683,775\n292,315 -> 451,315\n397,435 -> 380,435\n987,978 -> 82,73\n227,349 -> 227,724\n349,741 -> 899,191\n965,325 -> 765,125\n849,306 -> 88,306\n516,548 -> 516,902\n919,395 -> 568,395\n736,507 -> 192,507\n960,782 -> 196,18\n431,413 -> 510,492\n911,696 -> 911,830\n888,225 -> 174,225\n57,790 -> 57,953\n858,399 -> 119,399\n59,302 -> 290,302\n456,907 -> 456,599\n374,743 -> 374,565\n183,107 -> 183,171\n58,699 -> 288,699\n886,970 -> 109,193\n940,395 -> 806,261\n781,480 -> 596,665\n456,724 -> 265,724\n414,406 -> 299,521\n115,898 -> 115,863\n34,543 -> 34,496\n900,843 -> 900,457\n165,209 -> 189,209\n976,627 -> 539,190\n252,202 -> 137,202\n584,339 -> 550,373\n580,153 -> 380,353\n232,412 -> 650,830\n910,833 -> 88,11\n418,245 -> 829,245\n298,823 -> 907,214\n91,876 -> 495,876\n315,874 -> 650,539\n907,635 -> 365,635\n339,313 -> 320,313\n362,435 -> 362,938\n152,664 -> 152,391\n253,210 -> 272,210\n216,396 -> 216,726\n852,912 -> 15,75\n882,828 -> 689,828\n674,533 -> 674,523\n469,719 -> 469,79\n733,169 -> 665,101\n734,632 -> 717,632\n615,565 -> 615,114\n979,720 -> 243,720\n827,125 -> 827,919\n605,419 -> 601,419\n749,13 -> 433,329\n990,902 -> 990,843\n186,679 -> 186,457\n374,796 -> 736,796\n133,867 -> 133,801\n757,622 -> 812,567\n351,179 -> 351,509\n214,748 -> 575,748\n177,903 -> 861,219\n747,981 -> 747,64\n588,125 -> 588,557\n464,338 -> 769,338\n645,669 -> 125,149\n579,352 -> 138,352\n77,605 -> 520,605\n698,816 -> 698,917\n112,943 -> 112,834\n731,720 -> 724,720\n887,440 -> 976,351\n676,301 -> 676,741\n870,732 -> 870,648\n250,826 -> 413,826\n399,720 -> 543,864\n834,93 -> 468,459\n415,475 -> 415,641\n793,415 -> 47,415\n365,476 -> 365,31\n195,154 -> 813,154\n503,605 -> 773,605\n553,121 -> 851,121\n25,420 -> 423,818\n943,110 -> 258,110\n775,436 -> 826,436\n16,161 -> 16,889\n702,555 -> 920,555\n589,858 -> 533,802\n932,404 -> 932,539\n647,275 -> 647,962\n87,179 -> 326,179\n931,588 -> 931,287\n868,96 -> 557,96\n879,28 -> 875,28\n375,132 -> 287,44\n484,352 -> 644,512\n448,566 -> 448,214\n734,460 -> 717,460\n550,379 -> 550,674\n964,184 -> 820,328\n167,504 -> 387,504\n594,777 -> 952,777\n328,712 -> 837,712\n600,773 -> 546,773\n955,954 -> 82,81\n863,790 -> 863,86\n831,773 -> 32,773\n987,11 -> 19,979\n901,878 -> 901,177\n427,341 -> 721,635\n690,835 -> 567,835\n557,724 -> 14,181\n591,20 -> 205,406\n846,865 -> 846,859\n644,646 -> 742,548\n187,376 -> 187,563\n367,806 -> 250,923\n332,731 -> 468,731\n378,431 -> 469,431\n844,949 -> 844,452\n172,320 -> 735,320\n597,639 -> 633,639\n353,831 -> 353,307\n355,392 -> 465,392\n624,179 -> 548,255\n441,928 -> 401,888\n442,680 -> 442,569\n567,385 -> 908,44\n10,561 -> 603,561\n851,289 -> 13,289\n832,143 -> 832,64\n366,851 -> 67,851\n890,404 -> 333,961\n83,22 -> 963,902\n10,783 -> 821,783\n369,481 -> 369,611\n943,356 -> 846,356\n675,95 -> 335,435\n442,928 -> 442,764\n500,643 -> 334,643\n90,207 -> 620,207\n520,412 -> 745,187\n586,89 -> 613,89\n411,424 -> 595,424\n938,650 -> 232,650\n216,773 -> 76,773\n895,690 -> 895,294\n250,886 -> 250,605\n296,422 -> 863,989\n534,626 -> 534,707\n577,608 -> 52,83\n61,674 -> 714,21\n844,126 -> 844,694\n565,541 -> 253,229\n62,24 -> 986,948\n588,901 -> 588,212\n541,508 -> 541,141\n516,376 -> 589,449\n390,215 -> 749,215\n324,878 -> 296,850\n592,408 -> 592,158\n433,207 -> 172,207\n139,72 -> 139,121\n471,676 -> 268,676\n374,433 -> 374,95\n672,459 -> 640,427\n348,577 -> 843,82\n903,466 -> 903,348\n437,759 -> 726,470\n152,101 -> 325,274\n933,897 -> 335,897\n516,877 -> 505,866\n890,715 -> 570,715\n78,124 -> 871,917\n360,645 -> 967,645\n645,271 -> 645,57\n693,878 -> 693,159\n49,77 -> 49,744\n935,914 -> 97,76\n941,726 -> 941,464\n756,985 -> 756,480\n887,378 -> 887,529\n405,925 -> 405,533\n533,156 -> 201,156\n565,535 -> 120,90\n51,15 -> 967,931\n660,218 -> 660,339\n522,682 -> 571,682\n958,899 -> 729,899\n521,687 -> 288,687\n643,148 -> 468,323\n989,971 -> 68,50\n729,273 -> 311,691\n245,205 -> 305,205\n634,747 -> 634,605\n280,407 -> 488,199\n109,931 -> 706,334\n849,694 -> 615,928\n794,84 -> 218,84\n669,184 -> 865,184\n936,834 -> 234,132\n691,445 -> 914,668\n423,161 -> 515,69\n81,674 -> 37,674\n292,423 -> 292,741\n188,306 -> 844,962\n204,309 -> 204,705\n961,652 -> 746,652\n985,987 -> 11,13\n139,153 -> 936,950\n436,978 -> 244,978\n921,633 -> 921,340\n872,63 -> 233,63"



--input =
--    "0,9 -> 5,9\n8,0 -> 0,8\n9,4 -> 3,4\n2,2 -> 2,1\n7,0 -> 7,4\n6,4 -> 2,0\n0,9 -> 2,9\n3,4 -> 1,4\n0,0 -> 8,8\n5,5 -> 8,2"


type alias Point =
    { x : Int
    , y : Int
    }


type alias Line =
    { start : Point
    , end : Point
    }


createPoint : String -> Point
createPoint rawPoint =
    rawPoint
        |> String.split ","
        |> List.map (String.trim >> String.toInt >> Maybe.withDefault 0)
        |> (\coords ->
                case coords of
                    [ x, y ] ->
                        Point x y

                    _ ->
                        Point -1 -1
           )


createLine : String -> Line
createLine rawLineString =
    --Debug.log "createLine" <|
    rawLineString
        |> String.split "->"
        |> List.map String.trim
        |> List.map createPoint
        |> (\points ->
                case points of
                    [ start, end ] ->
                        Line start end

                    _ ->
                        Line (Point -1 -1) (Point -1 -1)
           )



--case rawPoints of
--    [ a, b ] ->
--        Just (Line (createPoint a) (createPoint b))
--    _ ->
--        Nothing


lineIsHorizontal : Line -> Bool
lineIsHorizontal line =
    line.start.y == line.end.y


lineIsVertical : Line -> Bool
lineIsVertical line =
    line.start.x == line.end.x


lineIsHorizontalOrVertical : Line -> Bool
lineIsHorizontalOrVertical line =
    lineIsHorizontal line || lineIsVertical line


lineIsDiagonal : Line -> Bool
lineIsDiagonal =
    not << lineIsHorizontalOrVertical


calculateAllPointsOnLine : Line -> List Point
calculateAllPointsOnLine line =
    let
        x1 =
            line.start.x

        x2 =
            line.end.x

        y1 =
            line.start.y

        y2 =
            line.end.y

        ys =
            [ y1, y2 ]

        xs =
            [ x1, x2 ]

        diagonalPoints =
            Debug.log "diagonal points" <|
                case lineIsDiagonal line of
                    False ->
                        []

                    True ->
                        if x2 > x1 && y2 > y1 then
                            List.map2 Point (List.range x1 x2) (List.range y1 y2)

                        else if x2 < x1 && y2 < y1 then
                            List.map2 Point (List.range x2 x1) (List.range y2 y1)

                        else if x2 > x1 && y2 < y1 then
                            List.map2 Point (List.range x1 x2) (List.range y2 y1 |> List.reverse)

                        else if x2 < x1 && y2 > y1 then
                            List.map2 Point (List.range x2 x1 |> List.reverse) (List.range y1 y2)

                        else
                            []

        horizontalPoints =
            case lineIsHorizontal line of
                False ->
                    []

                True ->
                    let
                        min =
                            List.minimum xs |> Maybe.withDefault -1

                        max =
                            List.maximum xs |> Maybe.withDefault -1
                    in
                    List.range min max
                        |> List.map (\x -> Point x y1)

        verticalPoints =
            case lineIsVertical line of
                False ->
                    []

                True ->
                    let
                        min =
                            List.minimum ys |> Maybe.withDefault -1

                        max =
                            List.maximum ys |> Maybe.withDefault -1
                    in
                    List.range min max
                        |> List.map (\y -> Point x1 y)
    in
    List.concat [ horizontalPoints, verticalPoints, diagonalPoints ]


main =
    let
        lines =
            --Debug.log "lines" <|
            input
                |> String.split "\n"
                |> List.map createLine

        points =
            --Debug.log "points" <|
            lines
                |> List.concatMap calculateAllPointsOnLine

        allPoints =
            --Debug.log "Formatted points" <|
            points
                |> List.map (\p -> [ p.x, p.y ])

        map =
            Debug.log "map" <|
                (points
                    |> List.foldl
                        (\point acc ->
                            let
                                key =
                                    String.fromInt point.x ++ "-" ++ String.fromInt point.y

                                updater maybeCount =
                                    case maybeCount of
                                        Nothing ->
                                            Just 1

                                        Just n ->
                                            Just (n + 1)
                            in
                            acc
                                |> Dict.update key updater
                        )
                        Dict.empty
                )

        overlaps =
            Debug.log "overlaps" <|
                (map
                    |> Dict.values
                    |> List.filter (\n -> n >= 2)
                    |> List.length
                )
    in
    text "See console for results"
