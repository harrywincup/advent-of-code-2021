module Thirteen exposing (main)

import Debug
import Html exposing (text)



--input =
--    "6,10\n0,14\n9,10\n0,3\n10,4\n4,11\n6,0\n6,12\n4,1\n0,13\n10,12\n3,4\n3,0\n8,4\n1,10\n2,14\n8,10\n9,0\n\nfold along y=7\nfold along x=5"


input =
    "1118,85\n1064,690\n560,670\n68,446\n769,668\n88,219\n120,255\n925,879\n112,512\n1064,652\n1046,233\n902,417\n523,33\n1012,280\n1210,135\n410,142\n689,497\n698,211\n981,259\n465,610\n689,621\n1093,887\n114,728\n790,809\n139,59\n798,257\n390,457\n482,281\n701,190\n840,283\n320,723\n498,504\n256,397\n100,115\n401,92\n796,780\n239,729\n755,539\n736,870\n676,567\n484,560\n405,511\n187,387\n356,155\n42,659\n182,508\n256,374\n572,320\n738,207\n328,80\n70,528\n1111,752\n648,54\n33,308\n716,704\n701,798\n700,324\n10,260\n1076,401\n554,533\n592,885\n269,575\n492,528\n646,837\n1134,268\n1290,619\n442,248\n549,519\n908,647\n402,280\n1081,428\n768,575\n1277,525\n472,121\n985,635\n912,374\n512,499\n708,807\n1054,558\n305,856\n401,756\n8,53\n1044,256\n607,581\n156,840\n756,331\n771,609\n276,456\n1268,842\n1123,387\n155,526\n1125,380\n612,52\n864,772\n572,126\n1084,597\n666,397\n574,169\n33,481\n1098,280\n468,215\n370,3\n639,204\n1230,466\n512,684\n705,161\n738,126\n355,376\n1096,736\n1166,476\n1036,135\n912,782\n947,32\n636,50\n623,250\n1257,215\n416,672\n989,74\n1300,852\n776,659\n1196,838\n1064,304\n252,471\n994,410\n459,33\n567,361\n489,159\n1240,528\n58,506\n944,339\n788,0\n319,857\n644,215\n787,33\n1198,767\n798,843\n920,233\n760,411\n1300,626\n52,311\n812,558\n378,227\n226,437\n386,444\n169,291\n308,172\n698,618\n514,231\n761,235\n157,774\n798,684\n902,29\n428,37\n698,52\n405,383\n1104,256\n1058,784\n299,518\n617,332\n346,498\n1178,89\n1290,275\n1196,166\n293,425\n895,567\n1034,662\n596,56\n687,250\n534,255\n623,698\n1309,719\n92,347\n226,297\n736,253\n497,155\n736,528\n776,780\n223,42\n465,732\n900,53\n493,411\n909,838\n542,512\n385,659\n537,590\n1228,80\n420,462\n761,519\n879,852\n1277,693\n908,838\n890,324\n1092,383\n691,862\n602,378\n416,224\n296,598\n666,215\n234,347\n902,142\n1101,253\n581,362\n316,567\n28,255\n929,824\n117,77\n848,515\n701,704\n1136,233\n485,680\n1233,511\n788,357\n246,304\n500,505\n1144,63\n738,320\n964,620\n623,413\n26,495\n58,390\n82,590\n930,311\n239,578\n748,784\n873,518\n385,879\n311,242\n1036,666\n1230,641\n1032,224\n80,325\n1233,383\n1290,171\n31,413\n1076,493\n402,838\n731,690\n977,522\n92,36\n144,476\n520,365\n428,396\n1196,390\n100,149\n818,752\n142,637\n21,882\n295,61\n631,435\n731,204\n676,584\n68,448\n748,544\n560,224\n1,719\n683,152\n490,590\n909,373\n517,568\n967,690\n1015,450\n1092,175\n729,532\n676,248\n912,858\n1180,0\n174,233\n73,586\n403,292\n325,635\n308,474\n733,511\n38,787\n278,222\n562,36\n485,603\n296,822\n428,149\n433,494\n1240,120\n136,175\n1240,366\n1240,774\n485,214\n73,745\n668,364\n1071,119\n185,514\n882,268\n544,614\n540,838\n139,773\n1005,236\n156,280\n1290,584\n813,155\n209,826\n773,572\n715,852\n11,700\n562,350\n209,701\n293,33\n117,301\n1248,710\n343,690\n274,359\n1146,646\n930,666\n189,162\n161,383\n485,291\n912,558\n252,784\n1237,745\n35,32\n105,235\n760,483\n62,821\n977,372\n366,591\n221,848\n120,108\n991,857\n909,381\n355,518\n316,791\n445,583\n422,710\n510,508\n52,516\n349,236\n277,201\n276,662\n676,758\n502,455\n353,844\n415,316\n28,404\n498,558\n554,107\n1101,701\n935,873\n865,701\n1071,327\n497,409\n756,626\n1272,555\n1118,851\n1073,280\n385,463\n954,827\n1048,845\n402,59\n602,807\n577,511\n234,509\n642,880\n97,428\n705,226\n73,532\n1179,33\n74,87\n226,361\n256,484\n1154,280\n989,887\n982,696\n977,74\n566,51\n480,45\n398,72\n142,283\n848,851\n957,844\n390,233\n999,242\n366,339\n776,255\n1096,830\n845,162\n403,826\n1078,264\n274,666\n622,506\n70,366\n64,49\n579,690\n373,490\n738,350\n667,362\n134,591\n1064,808\n438,212\n53,215\n226,533\n359,416\n989,603\n1262,357\n1096,64\n701,544\n890,570\n358,296\n821,175\n851,33\n356,826\n1094,212\n1213,428\n596,390\n1066,814\n80,466\n273,824\n35,862\n877,235\n484,616\n103,42\n1181,810\n385,435\n768,736\n1289,539\n1173,568\n760,847\n826,726\n808,631\n714,388\n274,135\n900,752\n808,263\n810,57\n468,887\n38,824\n907,826\n1277,586\n33,362\n497,215\n912,820\n1054,397\n512,658\n64,497\n410,814\n689,301\n756,533\n1029,311\n470,891\n525,84\n1002,474\n540,248\n664,501\n912,72\n70,8\n353,162\n1155,368\n156,558\n808,487\n156,54\n1300,260\n192,67\n33,273\n338,266\n909,92\n117,814\n1158,36\n356,778\n1258,516\n1066,798\n957,162\n1228,768\n361,469\n157,215\n810,505\n687,413\n335,37\n1058,23\n920,498\n714,623\n1282,137\n1202,413\n1076,122\n251,327\n310,469\n1190,108\n687,385\n621,593\n403,567\n623,196\n882,793\n1228,590\n408,477\n296,72\n114,248\n808,256\n469,828\n825,456\n718,9\n1071,165\n301,550\n1169,882\n1041,459\n944,303\n560,710\n522,357\n338,215\n537,145\n687,698\n972,215\n328,814\n1265,404\n321,74\n909,597\n1242,448\n33,525\n120,786\n684,379\n164,248\n537,817\n1158,401\n329,259\n349,210\n1190,3\n550,847\n649,522\n276,214\n933,609\n1248,73\n542,158\n842,332\n842,108\n726,366\n1054,334\n1168,645\n252,871\n681,792\n602,29\n1141,291\n912,385\n462,379\n1174,495\n633,38\n20,310\n1193,814\n169,774\n643,252\n554,779\n1002,722\n1258,67\n298,378\n1054,547\n502,858\n1126,89\n333,74\n1014,520\n1081,690\n45,796\n1081,466\n146,469\n909,166\n902,752\n1250,32\n663,409\n131,861\n840,197\n174,45\n152,858\n186,679\n74,59\n164,590\n622,394\n964,396\n141,882\n1153,663\n584,8\n909,728\n321,7\n1222,135\n277,693\n252,423\n890,509\n162,287\n1071,266\n110,627\n305,38\n1275,862\n298,166\n838,569\n1054,484\n493,595\n110,491\n381,455\n572,687\n70,120\n773,817\n229,204\n566,135\n18,50\n114,390\n565,26\n902,466\n1135,674\n308,26\n1210,485\n502,493\n944,555\n256,560\n1153,774\n865,68\n28,137\n184,197\n962,809\n894,222\n634,567\n622,58\n808,183\n539,285\n1277,397\n522,537\n112,158\n1136,661\n114,646\n1200,280\n1263,89\n356,827\n87,640\n462,809\n21,539\n52,378\n771,285\n293,273\n246,735\n564,772\n714,390\n565,868\n401,597\n1034,438\n621,621\n1154,838\n92,99\n1300,186\n1237,532\n321,603\n664,837\n445,193\n1092,831\n234,401\n100,745\n1258,378\n1198,127\n550,411\n1034,456\n112,127\n11,194\n730,535\n872,614\n977,455\n1174,719\n937,190\n950,836\n237,280\n661,344\n246,204\n1193,301\n165,383\n164,764\n1009,102\n994,268\n373,190\n1174,175\n62,73\n907,567\n356,728\n120,3\n1252,56\n209,641\n113,226\n821,595\n738,277\n1176,533\n1009,498\n687,196\n1278,52\n1179,861\n502,519\n1076,547\n1169,12\n882,37\n244,814\n661,550\n925,659\n1171,59\n339,362\n1076,285\n1084,533\n1210,745\n808,519\n764,749\n689,273\n1092,511\n514,332\n398,173\n1014,72\n401,138\n1190,255\n1250,862\n622,388\n687,478\n333,372\n370,190\n694,385\n1124,556\n1056,749\n649,792\n154,729\n301,844\n329,635\n58,838\n940,190\n281,641\n515,387\n813,215\n841,262\n617,556\n1230,204\n930,379\n1012,291\n1218,795\n428,268\n21,486\n185,380\n1029,583\n315,586\n281,583\n100,268\n1088,859\n971,308\n88,395\n597,207\n621,273\n10,186\n370,704\n714,504\n427,770\n256,385\n1218,544\n485,829\n59,318\n744,135\n160,607\n972,716\n440,736\n291,862\n20,584\n840,891\n294,500\n920,457\n776,639\n679,435\n276,227\n1123,835\n216,491\n410,53\n646,841\n513,12\n32,282\n643,700\n1158,455\n1171,773\n216,212\n0,287\n146,425\n380,807\n1138,57\n932,227\n555,539\n21,42\n346,396\n688,282\n385,431\n398,273\n428,857\n132,313\n540,646\n52,827\n161,859\n1037,439\n641,446\n574,477\n281,311\n1198,158\n1200,715\n70,558\n139,387\n932,848\n744,311\n1002,172\n964,26\n169,120\n301,498\n642,364\n580,731\n909,354\n217,7\n1041,575\n1289,38\n1022,833\n1279,481\n1154,558\n1196,504\n104,607\n415,809\n1275,32\n398,334\n756,50\n182,773\n208,772\n1154,728\n1158,858\n730,59\n62,184\n957,344\n890,547\n1176,591\n73,362\n515,507\n1145,511\n1277,621\n62,9\n1277,413\n361,873\n786,0\n483,857\n534,780\n1252,838\n796,332\n1083,803\n662,840\n682,399\n798,499\n925,459\n1228,687\n895,316\n541,276\n208,324\n523,705\n907,292\n468,332\n1289,355\n667,700\n402,647\n416,387\n1054,560\n31,481\n920,396\n234,45\n\nfold along x=655\nfold along y=447\nfold along x=327\nfold along y=223\nfold along x=163\nfold along y=111\nfold along x=81\nfold along y=55\nfold along x=40\nfold along y=27\nfold along y=13\nfold along y=6"


type alias Mark =
    { x : Int
    , y : Int
    }


type Fold
    = Horizontal Int
    | Vertical Int


type alias Manual =
    { points : List Mark
    , folds : List Fold
    }


convertToMark : String -> Maybe Mark
convertToMark xyString =
    xyString
        |> String.split ","
        |> List.map (String.toInt >> Maybe.withDefault -1)
        |> (\coords ->
                case coords of
                    [ x, y ] ->
                        Just { x = x, y = y }

                    _ ->
                        Nothing
           )


parseFold : String -> Maybe Fold
parseFold s =
    s
        |> String.replace "fold along " ""
        |> String.split "="
        |> (\parts ->
                case parts of
                    [ axis, index ] ->
                        let
                            i =
                                index |> String.toInt |> Maybe.withDefault -1
                        in
                        case axis of
                            "x" ->
                                Just (Horizontal i)

                            "y" ->
                                Just (Vertical i)

                            _ ->
                                Nothing

                    _ ->
                        Nothing
           )


parseManual : String -> Manual
parseManual manual =
    case String.split "\n\n" manual of
        [ points, folds ] ->
            let
                ps =
                    points
                        |> String.lines
                        |> List.filterMap convertToMark

                fs =
                    folds
                        |> String.lines
                        |> List.filterMap parseFold
            in
            { points = ps
            , folds = fs
            }

        _ ->
            { points = [], folds = [] }


findMaxCoord : (Mark -> Int) -> List Mark -> Int
findMaxCoord searchFn marks =
    marks
        |> List.sortBy searchFn
        |> List.reverse
        |> List.head
        |> Maybe.map searchFn
        |> Maybe.withDefault 0


performFold : Fold -> List Mark -> List Mark
performFold fold points =
    let
        { getter, setter, index } =
            case fold of
                Horizontal i ->
                    { getter = .x
                    , setter = \m -> { m | x = (i * 2) - m.x }
                    , index = i
                    }

                Vertical i ->
                    { getter = .y
                    , setter = \m -> { m | y = (i * 2) - m.y }
                    , index = i
                    }
    in
    points
        |> List.partition (getter >> (<) index)
        |> Tuple.mapSecond (List.filter (getter >> (/=) index))
        |> (\( secondaries, primaries ) ->
                secondaries
                    |> List.filterMap
                        (\sm ->
                            case List.any (\pm -> pm.x == (index * 2 - sm.x) && pm.y == sm.y) primaries of
                                True ->
                                    Nothing

                                False ->
                                    Just (setter sm)
                        )
                    |> List.append primaries
           )


print : List Mark -> ()
print foldedPaper =
    let
        _ =
            List.range 0 (findMaxCoord .y foldedPaper)
                |> List.reverse
                |> List.map
                    (\y ->
                        List.range 0 (findMaxCoord .x foldedPaper)
                            |> List.map
                                (\x ->
                                    case List.any (\m -> m.x == x && m.y == y) foldedPaper of
                                        True ->
                                            " 0 "

                                        False ->
                                            "   "
                                )
                            |> String.join ""
                            |> Debug.log ""
                    )
    in
    ()


main =
    let
        manual =
            parseManual input
                |> Debug.log "manual"

        foldedPaper =
            manual.folds
                |> List.foldl performFold manual.points

        partOne =
            foldedPaper
                |> List.length
                |> Debug.log "partOne"

        partTwo =
            print foldedPaper
    in
    text "See console for results"
